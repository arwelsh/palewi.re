from __future__ import with_statement
import os
import sys
pwd = os.path.dirname(__file__)
sys.path.append(pwd)
from fabric.api import *
from pprint import pprint
import openstack.compute
Compute = openstack.compute.Compute
OPENSTACK_COMPUTE_USERNAME = ''
OPENSTACK_COMPUTE_API_KEY = ''

def prod():
    crane()

def crane():
    env.user = ''
    env.password = ''
    env.hosts = ['',]
    env.chef = '/var/lib/gems/1.8/bin/chef-solo -c solo.rb -j node.json'
    env.repo = 'git@github.com:palewire/palewire.com.git'
    env.app_user = 'palewire'
    env.app_path = '/apps/palewire.com/project/'
    env.venv_activate = 'source /apps/palewire.com/bin/activate'


def dodo():
    env.user = ''
    env.password = ''
    env.hosts = ['',]
    env.chef = '/usr/local/bin/chef-solo -c solo.rb -j node.json'
    env.repo = 'git@github.com:palewire/palewi.re.git'
    env.app_user = 'palewire'
    env.app_path = '/apps/palewi.re/project/'
    env.venv_activate = 'source /apps/palewi.re/bin/activate'


#
# OpenStack bootstrap
#

def bootstrap():
    """
    Everything it takes to configure a virgin server.
    """
    install_chef()
    cook()
    push_settings()
    _venv("python manage.py loaddb --name=palewire")


def install_chef():
    """
    Install chef. A good first step.
    """
    # Get all the basic ruby dependencies
    sudo('apt-get update', pty=True)
    sudo('apt-get install -y git-core rubygems ruby ruby-dev', pty=True)
    # Prevent install of ruby docs to speed things up
    sudo("echo 'gem: --no-ri --no-rdoc' > /root/.gemrc")
    # Install Chef
    sudo('gem install chef', pty=True)


def cook():
    """
    Sync your Chef cookbook and then execute its run list.
    """
    local('rsync -av ./chef/ %s@%s:/etc/chef' % (env.user, env.hosts[0]))
    sudo('cd /etc/chef && %s' % env.chef, pty=True)


def list_servers():
    """
    List all of our servers in the cloud.
    """
    compute = Compute(
        username=OPENSTACK_COMPUTE_USERNAME,
        apikey=OPENSTACK_COMPUTE_API_KEY
    )
    pprint(compute.servers.list())


def create_server(name, image='Ubuntu 12.04 LTS', flavor=256):
    """
    Create a new server in the cloud.
    """
    compute = Compute(
        username=OPENSTACK_COMPUTE_USERNAME,
        apikey=OPENSTACK_COMPUTE_API_KEY
    )
    fl = compute.flavors.find(ram=flavor)
    im = compute.images.find(name=image)
    compute.servers.create(name, image=im, flavor=fl)

#
# Database
#

def backup():
    """
    Upload a db snapshot to the Amazon S3 archive.
    """
    _venv("backupdb")


def fetchdb():
    """
    Download a remote database as a snapshot.
    """
    from datetime import date
    fname = "palewire-%s.tar" % str(date.today())
    # Runs the dump command, gzips the backup, and moves it to /tmp/
    sudo("/usr/bin/pg_dump palewire -Ft --file=/tmp/%s" % fname, user="postgres")
    # Downloads the file
    get("/tmp/%s" % fname, "./%s" % fname)
    # Delete it from the remote machine
    sudo("rm /tmp/%s" % fname)


def loaddb(date=''):
    """
    Load a db snapshot from the Amazon S3 archive, the latest by default.
    """
    local("python manage.py loaddb %s".strip() % date)


#
# Shortcuts
#

def deploy():
    """
    Update the site with the latest release.
    """
    pull_code()
    push_settings()
    #install_requirements()
    restart_apache()

#
# Code
#

def install_requirements():
    """
    Installs dependencies
    """
    _venv('pip install -r requirements.txt')


def pull_code(branch='master'):
    """
    Pulls the latest code from our repository.
    """
    # Jump in the repo...
    with cd(env.app_path):
        # ... pull the latest code ...
        sudo("git pull origin %s" % branch)


def push_settings():
    """
    Push the latest settings out.
    """
    put(
        os.path.join(os.path.dirname(__file__), 'settings_prod.py'),
        os.path.join(env.app_path, 'settings_prod.py')
    )

#
# Misc.
#

def _venv(cmd):
    """
    A wrapper for running commands in our prod virturalenv
    """
    env.shell = "/bin/bash -c"
    with cd(env.app_path):
        sudo("%s && %s" % (env.venv_activate, cmd), pty=True)


def manage(cmd):
    """
    Run a Django management command inside the project.
    """
    _venv("python manage.py %s" % cmd)


def restart_apache():
    """
    Restart the web server.
    """
    sudo('/etc/init.d/apache2 restart')


def restart_varnish():
    """
    Restart the varnish cache service.
    """
    sudo('/etc/init.d/varnish restart')


def restart_pgpool():
    """
    Restart the pgpool database caching service.
    """
    sudo('/etc/init.d/pgpool2 restart')


def restart_postgres():
    """
    Restart the postgresql database service.
    """
    sudo('/etc/init.d/postgresql restart')


def restart_munin():
    """
    Restart the munin monitoring service.
    """
    sudo('/etc/init.d/munin-node restart')


def load():
    """
    Prints the current load values.
   
    Example usage:
   
        $ fab stage load
        $ fab prod load
       
    """
    def _set_color(load):
        """
        Sets the terminal color for an load average value depending on how
        high it is.
       
        Accepts a string formatted floating point.

        Returns a formatted string you can print.
        """
        value = float(load)
        template = "\033[1m\x1b[%sm%s\x1b[0m\033[0m"
        if value < 1:
            # Return green
            return template % (32, value)
        elif value < 3:
            # Return yellow
            return template % (33, value)
        else:
            # Return red
            return template % (31, value)
   
    with hide('everything'):
        # Fetch the data
        uptime = run("uptime")
        # Whittle it down to only the load averages
        load = uptime.split(":")[-1]
        # Split up the load averages and apply a color code to each depending
        # on how high it is.
        one, five, fifteen = [_set_color(i.strip()) for i in load.split(',')]
        # Get the name of the host that is currently being tested
        host = env['host']
        # Combine the two things and print out the results
        output = u'%s: %s' % (host, ", ".join([one, five, fifteen]))
        print(output)


def ps(process='all'):
    """
    Reports a snapshot of the current processes.

    If the process kwarg provided is 'all', every current process is returned.

    Otherwise, the list will be limited to only those processes that match the kwarg.

    Example usage:

        $ fab prod ps:process=all
        $ fab prod ps:process=httpd
        $ fab prod ps:process=postgres

    Documentation::

        "ps":http://unixhelp.ed.ac.uk/CGI/man-cgi?ps

    """
    if process == 'all':
        run("ps aux")
    else:
        run("ps -e -O rss,pcpu | grep %s" % process)

#
# Stuff for local env
#

def rmpyc():
    """
    Erases pyc files from current directory.

    Example usage:

        $ fab rmpyc

    """
    print("Removing .pyc files")
    with hide('everything'):
        local("find . -name '*.pyc' -print0|xargs -0 rm", capture=False)


def pep8():
    """
    Flags any violations of the Python style guide.

    Requires that you have the pep8 package installed

    Example usage:

        $ fab pep8

    Documentation:

        http://github.com/jcrocholl/pep8

    """
    print("Checking Python style")
    # Grab everything public folder inside the current directory
    dir_list = [x[0] for x in os.walk('./') if not x[0].startswith('./.')]
    # Loop through them all and run pep8
    results = []
    with hide('everything'):
        for d in dir_list:
            results.append(local("pep8 %s" % d))
    # Filter out the empty results and print the real stuff
    results = [e for e in results if e]
    for e in results:
        print(e)


def tabnanny():
    """
    Checks whether any of your files have improper tabs
   
    Example usage:
   
        $ fab tabnanny
   
    """
    print("Running tabnanny")
    with hide('everything'):
        local("python -m tabnanny ./")


def rs(port=8000):
    """
    Fire up the Django test server, after cleaning out any .pyc files.

    Example usage:
   
        $ fab rs
        $ fab rs:port=9000
   
    """
    tabnanny()
    rmpyc()
    local("./manage.py runserver %s" % port, capture=False)


def sh():
    """
    Fire up the Django shell, after cleaning out any .pyc files.

    Example usage:
   
        $ fab sh
   
    """
    tabnanny()
    rmpyc()
    local("./manage.py shell", capture=False)


def big_files(min_size='20000k'):
    """
    List all files in this directory over the provided size, 20MB by default.
   
    Example usage:
   
        $ fab big_files
   
    """
    with hide('everything'):
        list_ = local("""find ./ -type f -size +%s -exec ls -lh {} \; | awk '{ print $NF ": " $5 }'""" % min_size)
    if list_:
        print("Files over %s" % min_size)
        print(list_)
    else:
        print("No files over %s" % min_size)
